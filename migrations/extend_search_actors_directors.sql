-- ================================================================
-- Migration: √âtendre la recherche aux acteurs et r√©alisateurs
-- Date: 2025-10-29
-- Description:
--   Modifie la fonction movies_update_search_vector() pour inclure
--   les noms des acteurs et r√©alisateurs dans le search_vector.
--   Ajoute des triggers pour mettre √† jour le search_vector quand
--   les associations acteurs/r√©alisateurs changent.
-- ================================================================

-- ================================================================
-- √âTAPE 1: Modifier la fonction de mise √† jour du search_vector
-- ================================================================

CREATE OR REPLACE FUNCTION movies_update_search_vector()
RETURNS TRIGGER AS $$
DECLARE
  v_actors_names TEXT;
  v_directors_names TEXT;
BEGIN
  -- Agr√©ger les noms des acteurs (JOIN via movie_actors)
  SELECT string_agg(a.nom_complet, ' ')
  INTO v_actors_names
  FROM actors a
  INNER JOIN movie_actors ma ON ma.actor_id = a.id
  WHERE ma.movie_id = NEW.id;

  -- Agr√©ger les noms des r√©alisateurs (JOIN via movie_directors)
  SELECT string_agg(d.nom_complet, ' ')
  INTO v_directors_names
  FROM directors d
  INNER JOIN movie_directors md ON md.director_id = d.id
  WHERE md.movie_id = NEW.id;

  -- Construire le search_vector avec pond√©ration:
  -- A = titre_francais (priorit√© maximale)
  -- B = titre_original, acteurs, r√©alisateurs (priorit√© √©lev√©e)
  -- C = synopsis (priorit√© normale)
  NEW.search_vector :=
    setweight(to_tsvector('french', coalesce(NEW.titre_francais, '')), 'A') ||
    setweight(to_tsvector('french', coalesce(NEW.titre_original, '')), 'B') ||
    setweight(to_tsvector('french', coalesce(v_actors_names, '')), 'B') ||
    setweight(to_tsvector('french', coalesce(v_directors_names, '')), 'B') ||
    setweight(to_tsvector('french', coalesce(NEW.synopsis, '')), 'C');

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

COMMENT ON FUNCTION movies_update_search_vector() IS
'Mise √† jour automatique du search_vector avec titre, synopsis, acteurs et r√©alisateurs';

-- ================================================================
-- √âTAPE 2: Cr√©er fonction pour mise √† jour quand casting change
-- ================================================================

CREATE OR REPLACE FUNCTION update_movie_search_on_cast_change()
RETURNS TRIGGER AS $$
BEGIN
  -- Mettre √† jour le search_vector du film concern√©
  -- Cette fonction sera appel√©e par les triggers sur movie_actors et movie_directors
  UPDATE movies
  SET updated_at = NOW()  -- Force l'ex√©cution du trigger movies_update_search_vector
  WHERE id = COALESCE(NEW.movie_id, OLD.movie_id);

  RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

COMMENT ON FUNCTION update_movie_search_on_cast_change() IS
'D√©clenche la mise √† jour du search_vector quand les acteurs ou r√©alisateurs changent';

-- ================================================================
-- √âTAPE 3: Cr√©er triggers sur movie_actors et movie_directors
-- ================================================================

-- Trigger pour movie_actors (INSERT, UPDATE, DELETE)
DROP TRIGGER IF EXISTS trigger_update_movie_search_on_actor_change ON movie_actors;
CREATE TRIGGER trigger_update_movie_search_on_actor_change
  AFTER INSERT OR UPDATE OR DELETE ON movie_actors
  FOR EACH ROW
  EXECUTE FUNCTION update_movie_search_on_cast_change();

COMMENT ON TRIGGER trigger_update_movie_search_on_actor_change ON movie_actors IS
'Met √† jour le search_vector du film quand ses acteurs changent';

-- Trigger pour movie_directors (INSERT, UPDATE, DELETE)
DROP TRIGGER IF EXISTS trigger_update_movie_search_on_director_change ON movie_directors;
CREATE TRIGGER trigger_update_movie_search_on_director_change
  AFTER INSERT OR UPDATE OR DELETE ON movie_directors
  FOR EACH ROW
  EXECUTE FUNCTION update_movie_search_on_cast_change();

COMMENT ON TRIGGER trigger_update_movie_search_on_director_change ON movie_directors IS
'Met √† jour le search_vector du film quand ses r√©alisateurs changent';

-- ================================================================
-- √âTAPE 4: R√©g√©n√©rer le search_vector pour tous les films existants
-- ================================================================

-- Cette op√©ration peut prendre quelques secondes selon le nombre de films
-- Elle force l'ex√©cution du trigger movies_update_search_vector pour tous les films

DO $$
DECLARE
  v_count INTEGER;
BEGIN
  -- Mettre √† jour tous les films pour d√©clencher le trigger
  UPDATE movies
  SET updated_at = NOW();

  -- Compter les films mis √† jour
  GET DIAGNOSTICS v_count = ROW_COUNT;

  -- Log du r√©sultat
  RAISE NOTICE '‚úÖ Migration termin√©e: % films ont eu leur search_vector r√©g√©n√©r√©', v_count;
END $$;

-- ================================================================
-- √âTAPE 5: V√©rifications et tests
-- ================================================================

-- Test 1: V√©rifier qu'un film avec acteurs/r√©alisateurs a un search_vector complet
DO $$
DECLARE
  v_movie_id UUID;
  v_search_vector tsvector;
  v_titre TEXT;
  v_actors_count INTEGER;
  v_directors_count INTEGER;
BEGIN
  -- S√©lectionner un film avec acteurs et r√©alisateurs
  SELECT
    m.id,
    m.titre_francais,
    m.search_vector,
    (SELECT COUNT(*) FROM movie_actors WHERE movie_id = m.id) as actors,
    (SELECT COUNT(*) FROM movie_directors WHERE movie_id = m.id) as directors
  INTO
    v_movie_id,
    v_titre,
    v_search_vector,
    v_actors_count,
    v_directors_count
  FROM movies m
  WHERE
    EXISTS (SELECT 1 FROM movie_actors WHERE movie_id = m.id)
    AND EXISTS (SELECT 1 FROM movie_directors WHERE movie_id = m.id)
  LIMIT 1;

  IF v_movie_id IS NOT NULL THEN
    RAISE NOTICE 'üìã Test sur film: % (ID: %)', v_titre, v_movie_id;
    RAISE NOTICE '   - Acteurs: %', v_actors_count;
    RAISE NOTICE '   - R√©alisateurs: %', v_directors_count;
    RAISE NOTICE '   - Search vector: % lex√®mes', array_length(tsvector_to_array(v_search_vector), 1);
    RAISE NOTICE '‚úÖ Le search_vector contient des donn√©es';
  ELSE
    RAISE NOTICE '‚ö†Ô∏è Aucun film avec acteurs ET r√©alisateurs trouv√© pour test';
  END IF;
END $$;

-- Test 2: Recherche par nom d'acteur
DO $$
DECLARE
  v_actor_name TEXT;
  v_movie_count INTEGER;
BEGIN
  -- S√©lectionner un acteur au hasard
  SELECT nom_complet INTO v_actor_name
  FROM actors
  WHERE EXISTS (SELECT 1 FROM movie_actors WHERE actor_id = actors.id)
  ORDER BY RANDOM()
  LIMIT 1;

  IF v_actor_name IS NOT NULL THEN
    -- Compter les films trouv√©s via recherche full-text
    SELECT COUNT(*) INTO v_movie_count
    FROM movies
    WHERE search_vector @@ to_tsquery('french', regexp_replace(v_actor_name, '\s+', ' & ', 'g'));

    RAISE NOTICE 'üìã Test recherche acteur: "%"', v_actor_name;
    RAISE NOTICE '   - Films trouv√©s: %', v_movie_count;

    IF v_movie_count > 0 THEN
      RAISE NOTICE '‚úÖ La recherche par acteur fonctionne';
    ELSE
      RAISE NOTICE '‚ö†Ô∏è Aucun film trouv√© (peut arriver si nom avec accents/caract√®res sp√©ciaux)';
    END IF;
  END IF;
END $$;

-- ================================================================
-- NOTES D'UTILISATION
-- ================================================================
--
-- Cette migration:
-- 1. ‚úÖ √âtend movies_update_search_vector() pour inclure acteurs et r√©alisateurs
-- 2. ‚úÖ Cr√©e des triggers pour mise √† jour automatique quand casting change
-- 3. ‚úÖ R√©g√©n√®re le search_vector pour tous les films existants
-- 4. ‚úÖ V√©rifie que la migration fonctionne avec des tests
--
-- Apr√®s cette migration, la recherche fonctionnera sur:
-- - Titre fran√ßais (priorit√© A)
-- - Titre original (priorit√© B)
-- - Noms des acteurs (priorit√© B) ‚Üê NOUVEAU
-- - Noms des r√©alisateurs (priorit√© B) ‚Üê NOUVEAU
-- - Synopsis (priorit√© C)
--
-- Aucun changement c√¥t√© frontend n√©cessaire.
-- La fonction RPC search_movies() utilise d√©j√† le champ search_vector.
-- ================================================================
